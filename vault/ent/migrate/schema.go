// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// CredentialsColumns holds the columns for the "credentials" table.
	CredentialsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "type", Type: field.TypeString, Default: "jwt_vc"},
		{Name: "raw", Type: field.TypeJSON},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "user_credentials", Type: field.TypeString, Nullable: true},
	}
	// CredentialsTable holds the schema information for the "credentials" table.
	CredentialsTable = &schema.Table{
		Name:       "credentials",
		Columns:    CredentialsColumns,
		PrimaryKey: []*schema.Column{CredentialsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "credentials_users_credentials",
				Columns:    []*schema.Column{CredentialsColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// DiDsColumns holds the columns for the "di_ds" table.
	DiDsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "jwk", Type: field.TypeBytes},
		{Name: "pem", Type: field.TypeBytes},
		{Name: "method", Type: field.TypeString, Nullable: true},
		{Name: "alg", Type: field.TypeString},
		{Name: "keyusage", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "user_dids", Type: field.TypeString, Nullable: true},
	}
	// DiDsTable holds the schema information for the "di_ds" table.
	DiDsTable = &schema.Table{
		Name:       "di_ds",
		Columns:    DiDsColumns,
		PrimaryKey: []*schema.Column{DiDsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "di_ds_users_dids",
				Columns:    []*schema.Column{DiDsColumns[8]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "displayname", Type: field.TypeString, Nullable: true},
		{Name: "type", Type: field.TypeString},
		{Name: "password", Type: field.TypeBytes},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// WebauthnCredentialsColumns holds the columns for the "webauthn_credentials" table.
	WebauthnCredentialsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "credential", Type: field.TypeJSON},
		{Name: "user_authncredentials", Type: field.TypeString},
	}
	// WebauthnCredentialsTable holds the schema information for the "webauthn_credentials" table.
	WebauthnCredentialsTable = &schema.Table{
		Name:       "webauthn_credentials",
		Columns:    WebauthnCredentialsColumns,
		PrimaryKey: []*schema.Column{WebauthnCredentialsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "webauthn_credentials_users_authncredentials",
				Columns:    []*schema.Column{WebauthnCredentialsColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		CredentialsTable,
		DiDsTable,
		UsersTable,
		WebauthnCredentialsTable,
	}
)

func init() {
	CredentialsTable.ForeignKeys[0].RefTable = UsersTable
	DiDsTable.ForeignKeys[0].RefTable = UsersTable
	WebauthnCredentialsTable.ForeignKeys[0].RefTable = UsersTable
}
