// Code generated by ent, DO NOT EDIT.

package did

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/evidenceledger/vcdemo/vault/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Jwk applies equality check predicate on the "jwk" field. It's identical to JwkEQ.
func Jwk(v []byte) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJwk), v))
	})
}

// Pem applies equality check predicate on the "pem" field. It's identical to PemEQ.
func Pem(v []byte) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPem), v))
	})
}

// Method applies equality check predicate on the "method" field. It's identical to MethodEQ.
func Method(v string) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMethod), v))
	})
}

// Alg applies equality check predicate on the "alg" field. It's identical to AlgEQ.
func Alg(v string) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAlg), v))
	})
}

// Keyusage applies equality check predicate on the "keyusage" field. It's identical to KeyusageEQ.
func Keyusage(v string) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKeyusage), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// JwkEQ applies the EQ predicate on the "jwk" field.
func JwkEQ(v []byte) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJwk), v))
	})
}

// JwkNEQ applies the NEQ predicate on the "jwk" field.
func JwkNEQ(v []byte) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldJwk), v))
	})
}

// JwkIn applies the In predicate on the "jwk" field.
func JwkIn(vs ...[]byte) predicate.DID {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DID(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldJwk), v...))
	})
}

// JwkNotIn applies the NotIn predicate on the "jwk" field.
func JwkNotIn(vs ...[]byte) predicate.DID {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DID(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldJwk), v...))
	})
}

// JwkGT applies the GT predicate on the "jwk" field.
func JwkGT(v []byte) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldJwk), v))
	})
}

// JwkGTE applies the GTE predicate on the "jwk" field.
func JwkGTE(v []byte) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldJwk), v))
	})
}

// JwkLT applies the LT predicate on the "jwk" field.
func JwkLT(v []byte) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldJwk), v))
	})
}

// JwkLTE applies the LTE predicate on the "jwk" field.
func JwkLTE(v []byte) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldJwk), v))
	})
}

// PemEQ applies the EQ predicate on the "pem" field.
func PemEQ(v []byte) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPem), v))
	})
}

// PemNEQ applies the NEQ predicate on the "pem" field.
func PemNEQ(v []byte) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPem), v))
	})
}

// PemIn applies the In predicate on the "pem" field.
func PemIn(vs ...[]byte) predicate.DID {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DID(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPem), v...))
	})
}

// PemNotIn applies the NotIn predicate on the "pem" field.
func PemNotIn(vs ...[]byte) predicate.DID {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DID(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPem), v...))
	})
}

// PemGT applies the GT predicate on the "pem" field.
func PemGT(v []byte) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPem), v))
	})
}

// PemGTE applies the GTE predicate on the "pem" field.
func PemGTE(v []byte) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPem), v))
	})
}

// PemLT applies the LT predicate on the "pem" field.
func PemLT(v []byte) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPem), v))
	})
}

// PemLTE applies the LTE predicate on the "pem" field.
func PemLTE(v []byte) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPem), v))
	})
}

// MethodEQ applies the EQ predicate on the "method" field.
func MethodEQ(v string) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMethod), v))
	})
}

// MethodNEQ applies the NEQ predicate on the "method" field.
func MethodNEQ(v string) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMethod), v))
	})
}

// MethodIn applies the In predicate on the "method" field.
func MethodIn(vs ...string) predicate.DID {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DID(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMethod), v...))
	})
}

// MethodNotIn applies the NotIn predicate on the "method" field.
func MethodNotIn(vs ...string) predicate.DID {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DID(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMethod), v...))
	})
}

// MethodGT applies the GT predicate on the "method" field.
func MethodGT(v string) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMethod), v))
	})
}

// MethodGTE applies the GTE predicate on the "method" field.
func MethodGTE(v string) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMethod), v))
	})
}

// MethodLT applies the LT predicate on the "method" field.
func MethodLT(v string) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMethod), v))
	})
}

// MethodLTE applies the LTE predicate on the "method" field.
func MethodLTE(v string) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMethod), v))
	})
}

// MethodContains applies the Contains predicate on the "method" field.
func MethodContains(v string) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMethod), v))
	})
}

// MethodHasPrefix applies the HasPrefix predicate on the "method" field.
func MethodHasPrefix(v string) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMethod), v))
	})
}

// MethodHasSuffix applies the HasSuffix predicate on the "method" field.
func MethodHasSuffix(v string) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMethod), v))
	})
}

// MethodIsNil applies the IsNil predicate on the "method" field.
func MethodIsNil() predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMethod)))
	})
}

// MethodNotNil applies the NotNil predicate on the "method" field.
func MethodNotNil() predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMethod)))
	})
}

// MethodEqualFold applies the EqualFold predicate on the "method" field.
func MethodEqualFold(v string) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMethod), v))
	})
}

// MethodContainsFold applies the ContainsFold predicate on the "method" field.
func MethodContainsFold(v string) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMethod), v))
	})
}

// AlgEQ applies the EQ predicate on the "alg" field.
func AlgEQ(v string) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAlg), v))
	})
}

// AlgNEQ applies the NEQ predicate on the "alg" field.
func AlgNEQ(v string) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAlg), v))
	})
}

// AlgIn applies the In predicate on the "alg" field.
func AlgIn(vs ...string) predicate.DID {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DID(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAlg), v...))
	})
}

// AlgNotIn applies the NotIn predicate on the "alg" field.
func AlgNotIn(vs ...string) predicate.DID {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DID(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAlg), v...))
	})
}

// AlgGT applies the GT predicate on the "alg" field.
func AlgGT(v string) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAlg), v))
	})
}

// AlgGTE applies the GTE predicate on the "alg" field.
func AlgGTE(v string) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAlg), v))
	})
}

// AlgLT applies the LT predicate on the "alg" field.
func AlgLT(v string) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAlg), v))
	})
}

// AlgLTE applies the LTE predicate on the "alg" field.
func AlgLTE(v string) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAlg), v))
	})
}

// AlgContains applies the Contains predicate on the "alg" field.
func AlgContains(v string) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAlg), v))
	})
}

// AlgHasPrefix applies the HasPrefix predicate on the "alg" field.
func AlgHasPrefix(v string) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAlg), v))
	})
}

// AlgHasSuffix applies the HasSuffix predicate on the "alg" field.
func AlgHasSuffix(v string) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAlg), v))
	})
}

// AlgEqualFold applies the EqualFold predicate on the "alg" field.
func AlgEqualFold(v string) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAlg), v))
	})
}

// AlgContainsFold applies the ContainsFold predicate on the "alg" field.
func AlgContainsFold(v string) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAlg), v))
	})
}

// KeyusageEQ applies the EQ predicate on the "keyusage" field.
func KeyusageEQ(v string) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKeyusage), v))
	})
}

// KeyusageNEQ applies the NEQ predicate on the "keyusage" field.
func KeyusageNEQ(v string) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldKeyusage), v))
	})
}

// KeyusageIn applies the In predicate on the "keyusage" field.
func KeyusageIn(vs ...string) predicate.DID {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DID(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldKeyusage), v...))
	})
}

// KeyusageNotIn applies the NotIn predicate on the "keyusage" field.
func KeyusageNotIn(vs ...string) predicate.DID {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DID(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldKeyusage), v...))
	})
}

// KeyusageGT applies the GT predicate on the "keyusage" field.
func KeyusageGT(v string) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldKeyusage), v))
	})
}

// KeyusageGTE applies the GTE predicate on the "keyusage" field.
func KeyusageGTE(v string) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldKeyusage), v))
	})
}

// KeyusageLT applies the LT predicate on the "keyusage" field.
func KeyusageLT(v string) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldKeyusage), v))
	})
}

// KeyusageLTE applies the LTE predicate on the "keyusage" field.
func KeyusageLTE(v string) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldKeyusage), v))
	})
}

// KeyusageContains applies the Contains predicate on the "keyusage" field.
func KeyusageContains(v string) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldKeyusage), v))
	})
}

// KeyusageHasPrefix applies the HasPrefix predicate on the "keyusage" field.
func KeyusageHasPrefix(v string) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldKeyusage), v))
	})
}

// KeyusageHasSuffix applies the HasSuffix predicate on the "keyusage" field.
func KeyusageHasSuffix(v string) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldKeyusage), v))
	})
}

// KeyusageEqualFold applies the EqualFold predicate on the "keyusage" field.
func KeyusageEqualFold(v string) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldKeyusage), v))
	})
}

// KeyusageContainsFold applies the ContainsFold predicate on the "keyusage" field.
func KeyusageContainsFold(v string) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldKeyusage), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.DID {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DID(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.DID {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DID(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.DID {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DID(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.DID {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DID(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DID) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DID) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DID) predicate.DID {
	return predicate.DID(func(s *sql.Selector) {
		p(s.Not())
	})
}
